# react_output.gbnf - Grammar to enforce ReAct JSON structure

# Root must be a JSON code block
root ::= code-block

# A code block is a JSON object wrapped in ```json ... ```
code-block ::= "```json" ws json-object ws "```" ws

# Whitespace definition
ws ::= [ \t\n\r]*

# A JSON object must be either a ToolCallObject OR a FinalAnswerObject
json-object ::= ToolCallObject | FinalAnswerObject

# Tool call format (is_final: false)
ToolCallObject ::= "{" ws
                   "\"is_final\"" ws ":" ws "false" ws "," ws
                   "\"thought\"" ws ":" ws JsonString ws "," ws
                   "\"tool_name\"" ws ":" ws JsonString ws "," ws
                   "\"arguments\"" ws ":" ws JsonObject ws
                   "}"

# Final answer format (is_final: true)
FinalAnswerObject ::= "{" ws
                     "\"is_final\"" ws ":" ws "true" ws "," ws
                     "\"thought\"" ws ":" ws JsonString ws "," ws
                     "\"answer\"" ws ":" ws JsonString ws
                     "}"

# JSON components
JsonObject ::= "{" ws ( JsonMember ( ws "," ws JsonMember )* )? ws "}"
JsonMember ::= JsonString ws ":" ws JsonValue
JsonArray ::= "[" ws ( JsonValue ( ws "," ws JsonValue )* )? ws "]"
JsonValue ::= JsonString | JsonNumber | JsonObject | JsonArray | "true" | "false" | "null"

# String with proper escaping
JsonString ::= "\"" ( EscapedChar | [^"\\] )* "\""
EscapedChar ::= "\\" ( ["\\/bfnrt] | "u" Hex Hex Hex Hex )
Hex ::= [0-9a-fA-F]

# Number definition
JsonNumber ::= "-"? ( "0" | [1-9] [0-9]* ) ( "." [0-9]+ )? ( [eE] [+-]? [0-9]+ )? ws 